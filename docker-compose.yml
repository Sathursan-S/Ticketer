# Docker Compose file for the entire Ticketer application

services:
  # -------------------- Authentication Service --------------------
  auth-service:
    build:
      context: ./services/authentication-service
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY-}auth-service
    restart: always
    ports:
      - 4040:4040
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14250
      - OTEL_SERVICE_NAME=authentication-service
    networks:
      - ticketer-network

  auth-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # -------------------- Events Service --------------------
  events-service:
    build:
      context: ./services/events-service
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY-}events-service
    restart: always
    ports:
      - 4041:4041
    depends_on:
      events-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://events-db:5432/events_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14250
      - OTEL_SERVICE_NAME=events-service
    networks:
      - ticketer-network

  events-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=events_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432
    volumes:
      - events-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY-}notification-service
    restart: always
    ports:
    - 4042:4042
    depends_on:
      notification-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-db:5432/notification_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14250
      - OTEL_SERVICE_NAME=notification-service
    networks:
      - ticketer-network

  notification-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5437:5432
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Ticket Service
  ticketservice:
    image: ${DOCKER_REGISTRY-}ticket-service
    build:
      context: .
      dockerfile: ./services/TicketService/Dockerfile
    ports:
    - "8082:80"  # Fixed to use standard HTTP port internally
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=ticketservice-db;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;
      - ConnectionStrings__Redis=redis:6379
      - DatabaseProvider=PostgreSQL
      - Redis__Endpoints__0=redis:6379
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
      - OpenTelemetry__ServiceName=TicketService
      - OpenTelemetry__Jaeger__Endpoint=jaeger:6831
      - OpenTelemetry__Otlp__Endpoint=http://otel-collector:4317
    depends_on:
      ticketservice-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketer-network
    restart: unless-stopped

  ticketservice-db:
    image: postgres:15
    ports:
      - "5435:5432"  # Changed from 5432:5432 to avoid conflict
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TicketServiceDb
    volumes:
      - ticketservice-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped

  # Booking Service
  bookingservice:
    image: ${DOCKER_REGISTRY-}booking-service
    build:
      context: .
      dockerfile: ./services/BookingService/Dockerfile
    ports:
    - "5200:80"  # Updated to use port 5200 externally
    depends_on:
      bookingservice-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
      - ConnectionStrings__PostgresSQL=Host=bookingservice-db;Port=5432;Database=BookingServiceDb;Username=postgres;Password=postgres;
      - OpenTelemetry__ServiceName=BookingService
      - OpenTelemetry__EnableConsoleExporter=true
      - OpenTelemetry__Jaeger__Enabled=true
      - OpenTelemetry__Jaeger__AgentHost=jaeger
      - OpenTelemetry__Jaeger__AgentPort=6831
    networks:
      - ticketer-network
    restart: unless-stopped

  bookingservice-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=BookingServiceDb
    ports:
      - "5436:5432"  # Changed from 5432:5432 to avoid conflict
    volumes:
      - bookingservice-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped

  paymentservice:
    image: ${DOCKER_REGISTRY-}payment-service
    build:
      context: .
      dockerfile: ./services/PaymentService/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8090
      - RabbitMq__Host=rabbitmq  # Fixed to point to the correct RabbitMQ service
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
      - OpenTelemetry__ServiceName=PaymentService
      - OpenTelemetry__Jaeger__Endpoint=jaeger:6831
      - OpenTelemetry__Otlp__Endpoint=http://otel-collector:4317
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketer-network
    restart: unless-stopped


  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
      
  # Redis for TicketService caching and distributed locking
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped
    
  # Redis Commander - Web UI for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ticketer-network
    restart: unless-stopped
    
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ticketer-network
    restart: unless-stopped

  # OpenTelemetry Collector for centralized telemetry collection
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics port
    depends_on:
      - jaeger
    networks:
      - ticketer-network
    restart: unless-stopped

  apigateway:
    image: ${DOCKER_REGISTRY-}ticketer-api-gateway
    build:
      context: .
      dockerfile: ./services/Gateway.Api/Dockerfile
    ports:
    - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - OpenTelemetry__ServiceName=Gateway.Api
      - OpenTelemetry__Jaeger__Endpoint=jaeger:6831
      - OpenTelemetry__Otlp__Endpoint=http://otel-collector:4317
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
    - bookingservice
    - ticketservice
    - paymentservice
    - events-service
    - notification-service
    - auth-service
    networks:
      - ticketer-network
    restart: unless-stopped


volumes:
  auth-db-data:
  events-db-data:
  notification-db-data:
  ticketservice-db-data:
  bookingservice-db-data:
  rabbitmq-data:
  redis-data:

networks:
  ticketer-network:
    driver: bridge
