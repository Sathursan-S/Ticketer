# Docker Compose file for the entire Ticketer application

services:
  # -------------------- Authentication Service --------------------
  auth-service:
    build:
      context: ./services/authentication-service
    restart: always
    ports:
      - 4040:4040
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  auth-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # -------------------- Events Service --------------------
  events-service:
    build:
    restart: always
    ports:
      - 8081:8081
    depends_on:
      events-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://events-db:5432/events_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  events-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=events_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432
    volumes:
      - events-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
    restart: always
    ports:
    - 8084:8082  # Changed from 8082:8082 to avoid conflict with ticketservice
    depends_on:
      notification-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-db:5432/notification_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  notification-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5437:5432
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Ticket Service
  ticketservice:
    image: ${DOCKER_REGISTRY-}ticketservice
    build:
      context: .
      dockerfile: ./services/TicketService/Dockerfile
    ports:
    - "8082:80"  # Fixed to use standard HTTP port internally
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=ticketservice-db;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;
      - DatabaseProvider=PostgreSQL
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
    depends_on:
      ticketservice-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketer-network
    restart: unless-stopped

  ticketservice-db:
    image: postgres:15
    ports:
      - "5435:5432"  # Changed from 5432:5432 to avoid conflict
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TicketServiceDb
    volumes:
      - ticketservice-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped

  # Booking Service
  bookingservice:
    image: ${DOCKER_REGISTRY-}bookingservice
    build:
      context: .
      dockerfile: ./services/BookingService/Dockerfile
    ports:
    - "8040:8040"  # Updated to use standard HTTP port internally
    depends_on:
      bookingservice-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8040
      - RabbitMq__Host=rabbitmq
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
      - ConnectionStrings__DefaultConnection=Host=bookingservice-db;Port=5432;Database=BookingServiceDb;Username=postgres;Password=postgres;
    networks:
      - ticketer-network
    restart: unless-stopped

  bookingservice-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=BookingServiceDb
    ports:
      - "5436:5432"  # Changed from 5432:5432 to avoid conflict
    volumes:
      - bookingservice-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped

  paymentservice:
    image: ${DOCKER_REGISTRY-}paymentservice
    build:
      context: .
      dockerfile: ./services/PaymentService/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8090
      - RabbitMq__Host=rabbitmq  # Fixed to point to the correct RabbitMQ service
      - RabbitMq__Username=guest
      - RabbitMq__Password=guest
      - RabbitMq__VirtualHost=/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketer-network
    restart: unless-stopped


  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  apigateway:
    image: ${DOCKER_REGISTRY-}gatewayapi
    build:
      context: .
      dockerfile: ./services/Gateway.Api/Dockerfile
    ports:
    - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    depends_on:
    - bookingservice
    - ticketservice
    - paymentservice
    - events-service
    - notification-service
    - auth-service
    networks:
      - ticketer-network
    restart: unless-stopped


volumes:
  auth-db-data:
  events-db-data:
  notification-db-data:
  ticketservice-db-data:
  bookingservice-db-data:
  rabbitmq-data:

networks:
  ticketer-network:
    driver: bridge
