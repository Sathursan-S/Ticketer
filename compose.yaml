# Docker Compose file for the entire Ticketer application
services:
  # Authentication Service
  auth-service:
    build:
      context: ./services/authentication-service
    restart: always
    ports:
      - 4040:4040
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  auth-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Events Service
  events-service:
    build:
      context: ./services/events-service
    restart: always
    ports:
      - 8081:8081
    depends_on:
      events-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://events-db:5432/events_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  events-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=events_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432
    volumes:
      - events-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
    restart: always
    ports:
      - 8082:8082
    depends_on:
      notification-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-db:5432/notification_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - ticketer-network

  notification-db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5434:5432
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network

  # Ticket Service
  ticketservice:
    image: ${DOCKER_REGISTRY-}ticketservice
    build:
      context: ./services/TicketService
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;
      - DatabaseProvider=PostgreSQL
    depends_on:
      ticketservice-db:
        condition: service_healthy
    networks:
      - ticketer-network
    restart: unless-stopped

  ticketservice-db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TicketServiceDb
    volumes:
      - ticketservice-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticketer-network
    restart: unless-stopped

  # Booking Service
  

volumes:
  auth-db-data:
  events-db-data:
  notification-db-data:
  ticketservice-db-data:

networks:
  ticketer-network:
    driver: bridge
