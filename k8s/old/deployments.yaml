apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: ticketer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        ports:
        - containerPort: 5672
        - containerPort: 15672
        envFrom:
        - configMapRef:
            name: rabbitmq-config
        livenessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "-q", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["rabbitmq-diagnostics", "-q", "check_running"]
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-booking
  namespace: ticketer
spec:
  serviceName: postgres-booking
  replicas: 1
  selector:
    matchLabels:
      app: postgres-booking
  template:
    metadata:
      labels:
        app: postgres-booking
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config
        env:
        - name: POSTGRES_DB
          value: "BookingServiceDb"
        volumeMounts:
        - name: postgres-booking-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 30
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: postgres-booking-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: postgres-storage
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-service
  namespace: ticketer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: booking-service
  template:
    metadata:
      labels:
        app: booking-service
    spec:
      containers:
      - name: booking-service
        image: bookingservice:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: booking-service-config
        env:
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres-booking;Port=5432;Database=BookingServiceDb;Username=postgres;Password=postgres;"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-ticket
  namespace: ticketer
spec:
  serviceName: postgres-ticket
  replicas: 1
  selector:
    matchLabels:
      app: postgres-ticket
  template:
    metadata:
      labels:
        app: postgres-ticket
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config
        env:
        - name: POSTGRES_DB
          value: "TicketServiceDb"
        volumeMounts:
        - name: postgres-ticket-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 30
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: postgres-ticket-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: postgres-storage
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ticket-service
  namespace: ticketer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ticket-service
  template:
    metadata:
      labels:
        app: ticket-service
    spec:
      containers:
      - name: ticket-service
        image: ticketservice:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: ticket-service-config
        env:
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres-ticket;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: ticketer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
    spec:
      containers:
      - name: payment-service
        image: paymentservice:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: payment-service-config
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-api
  namespace: ticketer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-api
  template:
    metadata:
      labels:
        app: gateway-api
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      containers:
      - name: gateway-api
        image: gatewayapi:1.0.0
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: gateway-api-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
