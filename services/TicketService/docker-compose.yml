version: '3.8'

services:
  # ticketservice:
  #   image: ${DOCKER_REGISTRY-}ticket-service
  #   build:
  #     context: ../../
  #     dockerfile: ./services/TicketService/Dockerfile
  #   ports:
  #     - "8080:5300"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Production
  #     - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;
  #     - ConnectionStrings__Redis=redis:6379
  #     - DatabaseProvider=PostgreSQL
  #     # Redis cluster endpoints configuration
  #     - Redis__Endpoints__0=redis:6379
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - ticket-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:5300/health/live"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 15s

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TicketServiceDb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticket-network
    restart: unless-stopped
    
  # Redis for distributed locking and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticket-network
    restart: unless-stopped
    
  # Redis Commander - Web UI for Redis management (optional, for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ticket-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticket-network
  # jaeger:
  #   image: jaegertracing/all-in-one:1.56
  #   ports:
  #     - "16686:16686" # Jaeger UI
  #     - "6831:6831/udp" # Jaeger agent UDP
  #     - "6832:6832/udp"
  #     - "14268:14268" # Collector HTTP
  #     - "14250:14250" # gRPC
  #   networks:
  #     - ticket-network
  #   restart: unless-stopped

  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:0.99.0
  #   command: ["--config=/etc/otel-collector-config.yaml"]
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "4317:4317" # OTLP gRPC
  #     - "4318:4318" # OTLP HTTP
  #   depends_on:
  #     - jaeger
  #     - prometheus
  #   networks:
  #     - ticket-network
  #   restart: unless-stopped

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - ticket-network
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - ticket-network
  #   restart: unless-stopped

networks:
  ticket-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
