version: '3.8'

services:
  ticketservice:
    image: ${DOCKER_REGISTRY-}ticketservice
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=TicketServiceDb;Username=postgres;Password=postgres;
      - ConnectionStrings__Redis=redis:6379
      - DatabaseProvider=PostgreSQL
      # Redis cluster endpoints configuration
      - Redis__Endpoints__0=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ticket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=TicketServiceDb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticket-network
    restart: unless-stopped
    
  # Redis for distributed locking and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ticket-network
    restart: unless-stopped
    
  # Redis Commander - Web UI for Redis management (optional, for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ticket-network
    restart: unless-stopped

networks:
  ticket-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
